// Spread implementation using precomputed distances.
// Nearnest neighbour data is read from serialized NearNeighbours protos

#include <iostream>
#include <limits>
#include <optional>

#define USE_OMP
#ifdef USE_OMP
#include <omp.h>
#endif

#define RESIZABLE_ARRAY_IWQSORT_IMPLEMENTATION
#include "Foundational/accumulator/accumulator.h"
#include "Foundational/cmdline/cmdline.h"
#include "Foundational/data_source/tfdatarecord.h"
#include "Foundational/iwmisc/misc.h"
#include "Foundational/iwstring/iw_stl_hash_map.h"

#include "spread_weights.h"

#ifdef BUILD_BAZEL
#include "Utilities/GFP_Tools/nearneighbours.pb.h"
#else
#include "nearneighbours.pb.h"
#endif

namespace nn_spread {

IWString smiles_tag = "$SMI<";
IWString identifier_tag = "PCN<";
IWString distance_tag = "DIST<";

using std::cerr;

using iw_tf_data_record::TFDataReader;

void
Usage(int rc) {
  // clang-format off
#if defined(GIT_HASH) && defined(TODAY)
  cerr << __FILE__ << " compiled " << TODAY << " git hash " << GIT_HASH << '\n';
#else
  cerr << __FILE__ << " compiled " << __DATE__ << " " << __TIME__ << '\n';
#endif
  // clang-format on
  // clang-format off
  cerr << R"(Performs spread selection on a file, or files, of serialized NearNeighbours protos.
This tool is designed for the case of large sets of fingerprints, mostly greater than say 1M.
For smaller sets, just run gfp_spread_standard, or gfp_spread_omp.
Input must be a file of serialized NearNeighbours protos, such as might be generated by:

gfp_nearneighbours_single_file_tbb  -h 8 -S /tmp/rand50k.nn.tfdata -T 0.45 -v rand10k.gfp

then use the resulting .tfdata file here.

 -n <nsel>      number of items to select - by default all items are selected.
 -T <dist>      discard neighbours further away than <dist>
 -q <n>         squeeze out selected items every <n> items selected.
 -3             three column output 'smiles id distance'.
 -W ...         initialise weighting options, enter '-W help' for info.
 -h <nthreads>  number of OMP threads to use.
 -S <fname>     smiles file that generated the nearneighbours - saves a scan through the input file.
 -v             verbose output.
  )";
  // clang-format on

  exit(rc);
}

// Data associated with the run.
// There is not a well defined separation between what should be in this
// struct and what should be in the Spread class.
struct Data {
  public:
    // Programme works in two phases.
    // First the data is read and the name and smiles of each item is found and
    // placed in these arrays.

    resizable_array_p<IWString> smiles;
    resizable_array_p<IWString> id;

    // That also allows the `id_to_ndx` data structure to be built;
    IW_STL_Hash_Map_uint id_to_ndx;

    // Whether or not each candidate has been selected.
    int* selected;

    // If we squeeze the pool, we need a cross reference from old numbers to
    // new numbers.
    uint32_t* xref;

    // When we read the data, we can impose a maximum distance.
    float max_distance;

  public:
    Data();
    ~Data();

    // This is really more complexity that should be in a struct...
    int Initialise(Command_Line& cl, char flag);
};

Data::Data() {
  selected = nullptr;
  xref = nullptr;
  max_distance = 1.1f;  // something greater than 1
}

Data::~Data() {
  delete [] selected;
  delete [] xref;
}

int
Data::Initialise(Command_Line& cl, char flag) {
  const int verbose = cl.option_present(flag);

  IWString s;
  if (cl.option_present('T')) {
    if (! cl.value(flag, max_distance) || max_distance <= 0.0f || max_distance > 1.0f) {
      cerr << "Invalid maximum distance specification (-T)\n";
      return 1;
    }

    if (verbose) {
      cerr << "Will discard neighbours with distances > " << max_distance << '\n';
    }
  }

  return 1;
}

class SpreadItem {
  private:
    // Each item keeps track of how close it is to a selected item.
    float _shortest_distance_to_selected;
    // We also need to keep track of the index value for the neighbour
    // with that distance.
    uint32_t _index_of_shortest_distance;

    // The index of this item in the global arrays of ids and smiles.
    uint32_t _ndx;

    // The number of neighbours we have.
    uint32_t _nbrs;

    // The id and distance of each neighbour.
    // Cound have used an id+distance struct, but no real advantage.
    uint32_t* _nbr;
    float* _dist;

    float _weight;

  public:
    SpreadItem();
    ~SpreadItem();

    int Build(const nnbr::NearNeighbours& proto,
              uint32_t ndx,
              const Data& data);

    int number_neighbours() const {
      return _nbrs;
    }
    uint32_t* nbrs() const {
      return _nbr;
    }

    // All the stored distances are updated as well.
    void set_weight(float s);

    uint32_t index_of_shortest_distance() const {
      return _index_of_shortest_distance;
    }

    float unweighted_distance(uint32_t nbr) const;

    void Squeeze(const Data& data);

    // If item `ndx` has been selected, we may need to update our
    // _shortest_distance_to_selected value.
    void ItemHasBeenSelected(uint32_t ndx);

    // Among our already selected neighbours, what is the shortest distance.
    // If successful, `ndx_of_closest` will be the index of the closest,
    // previously selected neighbour, and `closest_distance` will be the
    // corresponding distance.
    bool ClosestToAlreadySelected(uint32_t& ndx_of_closest,
                                  float& closest_distance) const;
    // Same except that it does not fill in ndx_of_closest.
    bool ClosestToAlreadySelected(float& closest_distance) const;
};

// A special value that will show up when an item is selected
// and none of its neighbours have been selected.
constexpr float kNoNeighboursSelected = 0.99f;

SpreadItem::SpreadItem() {
  _index_of_shortest_distance = 0;  // not really
  _shortest_distance_to_selected = kNoNeighboursSelected;
  _ndx = 0;
  _nbrs = 0;
  _nbr = nullptr;
  _dist = nullptr;

  _weight = 1.0f;
}

SpreadItem::~SpreadItem() {
  delete [] _nbr;
  delete [] _dist;
}


// Return the value for the key `id` in `id_to_ndx`.
std::optional<uint32_t>
GetNbrId(const std::string& id, const IW_STL_Hash_Map_uint& id_to_ndx) {
  IWString s(id);

  s.truncate_at_first(' ');

  const auto f = id_to_ndx.find(s);

  if (f == id_to_ndx.end()) {
    cerr << "GetNbrId:no number for '" << id << "'\n";
    return std::nullopt;
  }

  return f->second;
}

// Build from `proto` in a situation where our index will be `my_ndx`.
// If we detect self neighbours in the input, drop them.
int
SpreadItem::Build(const nnbr::NearNeighbours& proto,
                  uint32_t my_ndx,
                  const Data& data) {
  _nbrs = proto.nbr_size();
  _nbr = new uint32_t[_nbrs];
  _dist = new float[_nbrs];

  int ndx = 0;  // Index into the arrays.

  for (const nnbr::Nbr& nbr : proto.nbr()) {
    std::optional<uint32_t> maybe_nbr = GetNbrId(nbr.id(), data.id_to_ndx);
    if (!maybe_nbr) {
      cerr << "Leader_Item::build:invalid neighbour specification '" << nbr.id() << "'\n";
      return 0;
    }
    if (*maybe_nbr ==  my_ndx) {
      --_nbrs;
      continue;
    }

    _nbr[ndx] = *maybe_nbr;

    float d = nbr.dist();

    assert(d >= 0.0f && d <= 1.0f);

    if (d > data.max_distance) {
      continue;
    }

    _dist[ndx] = d;

    ++ndx;
  }
  _nbrs = ndx;

#ifdef DEBUG_BUILD
  cerr << "Item " << _ndx << " has " << _nbrs << " neighbours\n";
  for (int i = 0; i < _nbrs; ++i) {
    cerr << ' ' << _nbr[i] << '\n';
  }
#endif

  return 1;
}

void
SpreadItem::set_weight(float s) {
  _weight = s;
  for (uint32_t i = 0; i < _nbrs; ++i) {
    _dist[i] *= _weight;
  }
}

float
SpreadItem::unweighted_distance(uint32_t nbr) const {
  for (uint32_t i = 0; i < _nbrs; ++i) {
    if (_nbr[i] != nbr) {
      continue;
    }

    return _dist[i] / _weight;
  }

  // SHould not happen.
  return -0.0f;
}

// The overall system is looking for the SpreadItem that is furthest
// away from an already selected item.
// So far, the furthest item is `closest_distance`. If we are larger
// then that, then update `closest_distance` and `ndx_of_closest`.
bool
SpreadItem::ClosestToAlreadySelected(uint32_t& ndx_of_closest,
                        float& closest_distance) const {

  // cerr << "ClosestToAlreadySelected, _shortest_distance_to_selected " << _shortest_distance_to_selected << " cmp " << closest_distance << '\n';
  if (closest_distance > _shortest_distance_to_selected) {
    return false;
  }

  // We are further away, update the arguments and return true.
  closest_distance = _shortest_distance_to_selected;
  ndx_of_closest = _index_of_shortest_distance;

  return true;
}
bool
SpreadItem::ClosestToAlreadySelected(float& closest_distance) const {

  // cerr << "ClosestToAlreadySelected, _shortest_distance_to_selected " << _shortest_distance_to_selected << " cmp " << closest_distance << '\n';
  if (closest_distance > _shortest_distance_to_selected) {
    return false;
  }

  // We are further away, update the arguments and return true.
  closest_distance = _shortest_distance_to_selected;

  return true;
}

// Item `sel` has just been selected. 
// Scan our list of neighbours and find `sel`. Update
// _shortest_distance_to_selected if needed.
void
SpreadItem::ItemHasBeenSelected(uint32_t sel) {
  for (uint32_t i = 0; i < _nbrs; ++i) {
    if (_nbr[i] != sel) {
      continue;
    }

    if (_dist[i] < _shortest_distance_to_selected) {
      _shortest_distance_to_selected = _dist[i];
      _index_of_shortest_distance = _nbr[i];
    }
    return;
  }
  // SHould not come here.
}

void
SpreadItem::Squeeze(const Data& data) {
  uint32_t ndx = 0;
  for (uint32_t i = 0; i < _nbrs; ++i) {
    if (data.selected[i]) {
    } else if (ndx < i) {
      _nbr[ndx] = data.xref[_nbr[i]];
      _dist[ndx] = _dist[i];
      ++ndx;
    }
  }

  _index_of_shortest_distance = data.xref[_index_of_shortest_distance];

  _nbrs = ndx;
}

uint32_t kUnsetNeighbour = std::numeric_limits<uint32_t>::max();


class Spread {
  private:
    // The number of items to select.
    uint32_t _items_to_select;

    int _weight_column;

    resizable_array_p<SpreadItem> _pool;

    uint32_t _squeeze;

    // As the data is read, anything with 0 neighbours is a singleton
    // and will be selected immediately, and not added to the pool.
    // Keep track of how many of these there are.
    uint32_t _singleton_count;

    bool _three_column_output;
    IWString _output_separator;

    spread_weights::ScalingFactor _weights;

    // Number of OMP threads to use.
    int _nthreads;

    int _verbose;

  // Private functions.
    int AddToPool(const nnbr::NearNeighbours& proto,
          const Data& data,
          IWString_and_File_Descriptor& output);
    bool EstablishCrossReferences(const nnbr::NearNeighbours& proto, Data& data);
    uint32_t EstablishCrossReferences(TFDataReader& input, Data& data);
    bool EstablishCrossReferences(const IWString& smiles,
                                 IWString& id,
                                 Data& data);
    uint32_t ReadSmiles(iwstring_data_source& input, Data& data);
    bool ReadSmilesRecord(const const_IWSubstring& buffer, Data& data);
    uint32_t ReadNbrData(TFDataReader& input,
            const Data& data,
            IWString_and_File_Descriptor& output);
    int HandleSingleton(const nnbr::NearNeighbours& proto,
                        IWString_and_File_Descriptor& output);
    bool MostDistant(Data& data, uint32_t& ndx_of_furthest,
                    uint32_t& nbr_of_furthest,
                    float& longest_distance) const;
    bool MostDistantOmp(Data& data, uint32_t& ndx_of_furthest,
                    uint32_t& nbr_of_furthest,
                    float& longest_distance) const;
    int ItemHasBeenSelected(Data& data, uint32_t sel,
                uint32_t nbr,
                float dist,
                IWString_and_File_Descriptor& output);
    void WriteSmilesId(const Data& data, uint32_t ndx, IWString_and_File_Descriptor& output) const;
    void ThreeColumOutput(const Data& data, uint32_t ndx, uint32_t nbr, float dist, 
                        IWString_and_File_Descriptor& output) const;
    int FirstItemHasBeenSelected(Data& data, uint32_t sel,
                IWString_and_File_Descriptor& output);

    int Squeeze(Data& data);

  public:
    Spread();

    int Initialise(Command_Line& cl);

    uint32_t EstablishCrossReferences(const char* fname, Data& data);
    uint32_t ReadSmiles(const IWString& fname, Data& data);

    int InitialiseWeights(Data& data);

    uint32_t size() const {
      return _pool.size();
    }

    uint32_t squeeze() const {
      return _squeeze;
    }

    void ReservePool(uint32_t s) {
      _pool.reserve(s);
    }

    int singleton_count() const {
      return _singleton_count;
    }

    uint32_t ReadNbrData(const char* fname,
            const Data& data,
            IWString_and_File_Descriptor& output);

    Accumulator_Int<uint64_t> Nbrs() const;

    uint32_t SpreadSelection(Data& data, IWString_and_File_Descriptor& output);
};

Spread::Spread() {
  _items_to_select = std::numeric_limits<uint32_t>::max();
  _nthreads = 0;
  _squeeze = 0;
  _singleton_count = 0;
  _three_column_output = false;
  _output_separator = ' ';
  _verbose = 0;
}

int
Spread::Initialise(Command_Line& cl) {

  _verbose = cl.option_present('v');

  if (cl.option_present('n')) {
    if (! cl.value('n', _items_to_select)) {
      cerr << "Invalid items to select (-n)\n";
      return 0;
    }

    if (_verbose) {
      cerr << "Will select " << _items_to_select << " items\n";
    }
  }

  if (cl.option_present('s')) {
    uint32_t s;
    if (! cl.value('s', s)) {
      cerr << "Invalid pool size estimate '" << s << "'\n";
      return 0;
    }
    if (_verbose) {
      cerr << "Space reserved for " << s << " items\n";
    }

    _pool.reserve(s);
  }

  if (cl.option_present('3')) {
    _three_column_output = true;
    if (_verbose) {
      cerr << "Will generate three column output: smiles id distance\n";
    }
  }

  if (cl.option_present('q')) {
    if (! cl.value('q', _squeeze) || _squeeze == 0) {
      cerr << "The squeeze optio (-q) must be a whole +ve number\n";
      return 0;
    }
    if (_verbose) {
      cerr << "Will squeeze out selected items every " << _squeeze << " items selected\n";
    }
  }

  if (cl.option_present('W')) {
    if (! _weights.Initialise(cl, 'W', _verbose)) {
      return 0;
    }
  }

  if (cl.option_present('h')) {
    if (! cl.value('h', _nthreads) || _nthreads < 1) {
      cerr << "The number of OMP threads must be a whole +ve number\n";
      Usage(1);
    }
    omp_set_num_threads(_nthreads);
    if (_verbose) {
      cerr << "Will use " << _nthreads << " threads\n";
    }
  }

  return 1;
}

int
Spread::HandleSingleton(const nnbr::NearNeighbours& proto,
                        IWString_and_File_Descriptor& output) {
  ++_singleton_count;

  if (_three_column_output) {
    output << proto.smiles() << _output_separator << proto.name() << _output_separator << '\n';
  } else {
    output << smiles_tag << proto.smiles() << ">\n";
    output << identifier_tag << proto.name() << ">\n";
    output << distance_tag << "1>\n";
    output << "|\n";
  }

  output.write_if_buffer_holds_more_than(4192);

  return 1;
}

int
Spread::AddToPool(const nnbr::NearNeighbours& proto,
          const Data& data,
          IWString_and_File_Descriptor& output) {
  std::unique_ptr<SpreadItem> s = std::make_unique<SpreadItem>();

  // We need to pass on the index that `s` will have.
  uint32_t ndx = _pool.size();

  if (! s->Build(proto, ndx, data)) {
    cerr << "AddToPool:invalid proto data " << proto.ShortDebugString() << '\n';
    return 0;
  }

  if (s->number_neighbours() == 0) {
    return HandleSingleton(proto, output);
  }

  _pool << s.release();

  return 1;
}

uint32_t
Spread::ReadNbrData(TFDataReader& input,
            const Data& data,
            IWString_and_File_Descriptor& output) {
  while (1) {
    std::optional<nnbr::NearNeighbours> maybe_proto =
      input.ReadProto<nnbr::NearNeighbours>();
    if (! maybe_proto) {
      return _pool.size();
    }

    AddToPool(*maybe_proto, data, output);
  }

  return _pool.size();
}

uint32_t
Spread::ReadNbrData(const char* fname,
            const Data& data,
            IWString_and_File_Descriptor& output) {

  TFDataReader input(fname);
  if (! input.good()) {
    cerr << "ReadNbrData:cannot open '" << fname << "'\n";
    return 0;
  }

  return ReadNbrData(input, data, output);
}

bool
Spread::EstablishCrossReferences(const nnbr::NearNeighbours& proto, Data& data) {
  IWString id = proto.name();
  IWString smiles = proto.smiles();

  return EstablishCrossReferences(id, smiles, data);
}

bool
Spread::EstablishCrossReferences(const IWString& smiles,
                                 IWString& id,
                                 Data& data) {
  id.truncate_at_first(' ');

  if (auto iter = data.id_to_ndx.find(id); iter != data.id_to_ndx.end()) {
    cerr << "Spread::EstablishCrossReferences:duplicate identifier '" << id << "'\n";
    return false;
  }

  auto s = data.id.size();

  assert(s == data.smiles.size());

  data.id << new IWString(id);
  data.smiles << new IWString(smiles);
  
  data.id_to_ndx[id] = s;

  return true;
}

uint32_t
Spread::EstablishCrossReferences(TFDataReader& input, Data& data) {
  uint32_t items_read = 0;

  while (1) {
    std::optional<nnbr::NearNeighbours> maybe_proto =
      input.ReadProto<nnbr::NearNeighbours>();
    if (! maybe_proto) {
      return items_read;
    }

    if (maybe_proto->nbr_size() == 0) {
      continue;
    }

    if (! EstablishCrossReferences(*maybe_proto, data)) {
      return 0;
    }

    ++items_read;
  }

  return items_read;
}

uint32_t
Spread::EstablishCrossReferences(const char* fname, Data& data) {
  TFDataReader input(fname);
  if (! input.good()) {
    cerr << "Spread::EstablishCrossReferences:cannot open '" << fname << "'\n";
    return 0;
  }

  return EstablishCrossReferences(input, data);
}

uint32_t
Spread::ReadSmiles(const IWString& fname, Data& data) {
  iwstring_data_source input(fname);

  if (! input.good()) {
    cerr << "Spread::ReadSmiles:cannot open '" << fname << "'\n";
    return 0;
  }

  return ReadSmiles(input, data);
}

uint32_t
Spread::ReadSmiles(iwstring_data_source& input, Data& data) {
  const_IWSubstring buffer;
  while (input.next_record(buffer)) {
    if (! ReadSmilesRecord(buffer, data)) {
      cerr << "Spread::ReadSmiles:cannot parse '" << buffer << "'\n";
      return 0;
    }
  }

  return data.id_to_ndx.size();
}

bool
Spread::ReadSmilesRecord(const const_IWSubstring& buffer, Data& data) {
  IWString smiles, id;
  int i = 0;
  if (! buffer.nextword(smiles, i) || ! buffer.nextword(id, i)) {
    cerr << "Spread::ReadSmilesRecord:invalid input\n";
    return 0;
  }

  return EstablishCrossReferences(smiles, id, data);
}

bool
Spread::MostDistant(Data& data, uint32_t& ndx_of_furthest,
                    uint32_t& nbr_of_furthest,
                    float& longest_distance) const {
  if (_nthreads > 0) {
    return MostDistantOmp(data, ndx_of_furthest, nbr_of_furthest, longest_distance);
  }

  const uint32_t n = _pool.size();

  longest_distance = -1.0f;

  for (uint32_t i = 0; i < n; ++i) {
    if (data.selected[i]) [[ unlikely ]] {
      continue;
    }

    if (_pool[i]->ClosestToAlreadySelected(longest_distance)) {
      ndx_of_furthest = i;
    }
  }

  if (longest_distance < 0.0f) [[ unlikely]] {
    return false;
  }

  nbr_of_furthest = _pool[ndx_of_furthest]->index_of_shortest_distance();

  return true;
}

bool
Spread::MostDistantOmp(Data& data, uint32_t& ndx_of_furthest,
                    uint32_t& nbr_of_furthest,
                    float& longest_distance) const {
  const uint32_t n = _pool.size();

  longest_distance = -1.0f;

  // cerr << "MostDistant scanning " << n << " items\n";
  // uint32_t count_nsel = 0;
#pragma omp parallel
  {
    float longest_distance_private = -1.0f;
    uint32_t ndx_of_furthest_private = 0;
#pragma omp for schedule(dynamic, 4192) nowait
    for (uint32_t i = 0; i < n; ++i) {
      if (data.selected[i]) [[ unlikely ]] {
        continue;
      }

      if (_pool[i]->ClosestToAlreadySelected(longest_distance_private)) {
        ndx_of_furthest_private = i;
      }
    }
#pragma omp critical
    {  // reduce across threads
      if (longest_distance_private > longest_distance) {
        longest_distance = longest_distance_private;
        ndx_of_furthest = ndx_of_furthest_private;
      }
    }  // pragma imp critical
  }  // pragma omp parallel

  if (longest_distance < 0.0f) [[ unlikely ]] {
    return false;
  }

  nbr_of_furthest = _pool[ndx_of_furthest]->index_of_shortest_distance();

  return true;
}

uint32_t
Spread::SpreadSelection(Data& data, IWString_and_File_Descriptor& output) {

  FirstItemHasBeenSelected(data, 0, output);

  uint32_t items_selected = 1;

  while (items_selected < _items_to_select) {
    // cerr << items_selected << " items selected\n";
    uint32_t most_distant;
    uint32_t prev_sel;
    float longest_distance;
    if (! MostDistant(data, most_distant, prev_sel, longest_distance)) {
      break;
    }

    ItemHasBeenSelected(data, most_distant, prev_sel, longest_distance, output);
    ++items_selected;
  }

  output.flush();

  return items_selected;
}

// Write in TDT form the smiles and identifier for item `ndx`.
void
Spread::WriteSmilesId(const Data& data, uint32_t ndx, 
                      IWString_and_File_Descriptor& output) const {
  output << smiles_tag << *data.smiles[ndx] << ">\n";
  output << identifier_tag << *data.id[ndx] << ">\n";
}

void
Spread::ThreeColumOutput(const Data& data, uint32_t ndx,
                        uint32_t nbr, float dist, 
                        IWString_and_File_Descriptor& output) const {
  output << *data.smiles[ndx] << _output_separator <<
            *data.id[ndx];
  // No, this is not correct...
  if (dist >= 0.0f) {
    output << _output_separator << dist;
    if (_weights.active() && nbr != kUnsetNeighbour) {
      output << _output_separator << _pool[ndx]->unweighted_distance(nbr);
    }
  }
  output << '\n';
}

int
Spread::FirstItemHasBeenSelected(Data& data, uint32_t sel,
                IWString_and_File_Descriptor& output) {
  assert(data.selected[sel] == 0);

  if (_three_column_output) {
    ThreeColumOutput(data, sel, kUnsetNeighbour, -1.0f, output);
  } else {
    WriteSmilesId(data, sel, output);
    output << "|\n";
  }

  data.selected[sel] = 1;

  // Notify all pool members that this first item has been selected.
  const uint32_t n = _pool.size();
  for (uint32_t i = 0; i < n; ++i) {
    _pool[i]->ItemHasBeenSelected(sel);
  }

  return 1;
}

int
Spread::ItemHasBeenSelected(Data& data, uint32_t sel,
                uint32_t nbr,
                float dist,
                IWString_and_File_Descriptor& output) {
  assert(data.selected[sel] == 0);

  if (_three_column_output) {
    ThreeColumOutput(data, sel, nbr, dist, output);
  } else {
    WriteSmilesId(data, sel, output);
    if (dist != kNoNeighboursSelected) {
      WriteSmilesId(data, nbr, output);
      output << distance_tag << dist << ">\n";
    }
    output << "|\n";
  }

  output.write_if_buffer_holds_more_than(4192);

  data.selected[sel] = 1;

  // Tell the unselected neighbours of `sel` that `sel` has been selected.

  const uint32_t* nbrs = _pool[sel]->nbrs();
#pragma omp parallel for schedule(dynamic, 16)
  for (int i = 0; i < _pool[sel]->number_neighbours(); ++i) {
    uint32_t nbr = nbrs[i];
    if (data.selected[nbr]) {
      continue;
    }

    _pool[nbr]->ItemHasBeenSelected(sel);
  }

  return 1;
}

int
Spread::Squeeze(Data& data) {
  assert(data.xref != nullptr);

  const uint32_t n = _pool.size();
  uint32_t ndx = 0;
  for (uint32_t i = 0; i < n; ++i) {
    if (data.selected[i]) {
      continue;
    }

    data.xref[ndx] = i;
  }

  // Remove selected items from _pool.
  for (uint32_t i = n - 1; i >= 0; --i) {
    if (data.selected[i]) {
      _pool.remove_item(i);
    }
  }

  for (SpreadItem* s : _pool) {
    s->Squeeze(data);
  }

  // All items are unselected now.
  std::fill_n(data.selected, ndx, 0);

  return 1;
}

Accumulator_Int<uint64_t> 
Spread::Nbrs() const {
  Accumulator_Int<uint64_t> result;

  for (const SpreadItem* s : _pool) {
    result.extra(s->number_neighbours());
  }

  return result;
}

int
Spread::InitialiseWeights(Data& data) {
  if (! _weights.active()) {
    return 1;
  }

  const uint32_t n = _pool.size();

  for (uint32_t i = 0; i < n; ++i) {
    std::optional<float> w = _weights.Weight(*data.id[i]);
    if (! w) {
      cerr << "Spread::InitialiseWeights:no weight for '" << *data.id[i] << "'\n";
      return 0;
    }

    _pool[i]->set_weight(*w);
  }

  return 1;
}

int
Main(int argc, char** argv) {
  Command_Line cl(argc, argv, "vs:n:3q:T:W:h:S:");

  if (cl.unrecognised_options_encountered()) {
    cerr << "Unrecognised options encountered\n";
    Usage(1);
  }

  const int verbose = cl.option_count('v');

  Spread spread;

  if (! spread.Initialise(cl)) {
    cerr << "Cannot initialise spread parameters\n";
  }

  if (cl.empty()) {
    cerr << "Must specify TFDataRecord input file consisting of serialised NearNeighbours protos\n";
    Usage(1);
  }

  Data data;

  if (! data.Initialise(cl, 'D')) {
    cerr << "Cannot initialise Data struct\n";
    return 1;
  }

  uint32_t items_in_input = 0;

  if (cl.option_present('S')) {
    IWString fname = cl.string_value('S');
    items_in_input = spread.ReadSmiles(fname, data);
    if (items_in_input == 0) {
      cerr << "Cannot read smiles '" << fname << "'\n";
      return 1;
    }
  } else {
    for (const char* fname: cl) {
      uint32_t tmp = spread.EstablishCrossReferences(fname, data);
      if (tmp == 0) {
        cerr << "Cannot establish cross reference information in '" << fname << "'\n";
        return 1;
      }
      items_in_input += tmp;
    }
  }

  if (verbose) {
    cerr << "Read " << items_in_input << " items + nearest neighbour data\n";
    cerr << data.id_to_ndx.size() << " items in hash\n";
  }

#ifdef ECHO_ID_TO_NDX
  for (const auto& [key, value] :data.id_to_ndx) {
    cerr << "key " << key << " value " << value << '\n';
  }
#endif

  spread.ReservePool(items_in_input);
  data.selected = new_int(items_in_input);

  if (spread.squeeze() > 0) {
    data.xref = new uint32_t[spread.squeeze()];
  }

  // Declare here because singletons are discarded as the data is read.
  IWString_and_File_Descriptor output(1);

  for (const char* fname: cl) {
    cerr << "Reading NNDATA from '" << fname << "'\n";
    if (! spread.ReadNbrData(fname, data, output)) {
      cerr << "Cannot read nearest neighbour data from '" << fname << "'\n";
      return 1;
    }
  }

  if (verbose) {
    cerr << "Encountered " << spread.singleton_count() << " singletons\n";
    cerr << "Start with " << spread.size() << " candidates\n";
    const Accumulator_Int<uint64_t> acc_nbrs = spread.Nbrs();
    cerr << "Nbrs btw " << acc_nbrs.minval() << " and " << acc_nbrs.maxval() << 
            " ave " << static_cast<float>(acc_nbrs.average()) << '\n';
  }

  if (cl.option_present('W')) {
    if (! spread.InitialiseWeights(data)) {
      cerr << "Cannot initialise weights\n";
    }
  }

  spread.SpreadSelection(data, output);

  output.flush();

  return 0;
}

}  // namespace nn_spread

int
main(int argc, char** argv) {
  int rc = nn_spread::Main(argc, argv);

  return rc;
}
